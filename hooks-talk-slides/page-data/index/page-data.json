{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","webpackCompilationHash":"a534389374c931d87177","result":{"data":{"deck":{"id":"ec6735b8-7190-57a8-8daa-a7cc184fc990","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"\\u269B \\uD83E\\uDDF7\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"This is a title\\\" subtitle=\\\"and this a subtitle\\\"\",\n    \"title\": \"\\\"This\",\n    \"is\": true,\n    \"a\": true,\n    \"title\\\"\": true,\n    \"subtitle\": \"\\\"and\",\n    \"this\": true,\n    \"subtitle\\\"\": true\n  }), \"function lorem(ipsum, dolor = 1) {\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n  dolor = sit - amet(dolor);\\n  return sit\\n    ? consectetur(ipsum, 0, dolor < 0 ? 0 : dolor)\\n    : [];\\n}\\n\\nfunction incididunt(ipsum, ut = 1) {\\n  ut = labore.et(amet(ut), 0);\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n\\n  if (!sit || ut < 1) {\\n    return [];\\n  }\\n\\n  let dolore = 0;\\n  let magna = 0;\\n  const aliqua = new eiusmod(labore.ut(sit / ut));\\n\\n  while (dolore < sit) {\\n    aliqua[magna++] = consectetur(\\n      ipsum,\\n      dolore,\\n      (dolore += ut)\\n    );\\n  }\\n\\n  return aliqua;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function lorem(ipsum, dolor = 1) {\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n  dolor = sit - amet(dolor);\\n  return sit\\n    ? consectetur(ipsum, 0, dolor < 0 ? 0 : dolor)\\n    : [];\\n}\\n\\nfunction adipiscing(...elit) {\\n  if (!elit.sit) {\\n    return [];\\n  }\\n\\n  const sed = elit[0];\\n  return eiusmod.tempor(sed) ? sed : [sed];\\n}\\n\\nfunction incididunt(ipsum, ut = 1) {\\n  ut = labore.et(amet(ut), 0);\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n\\n  if (!sit || ut < 1) {\\n    return [];\\n  }\\n\\n  let dolore = 0;\\n  let magna = 0;\\n  const aliqua = new eiusmod(labore.ut(sit / ut));\\n\\n  while (dolore < sit) {\\n    aliqua[magna++] = consectetur(\\n      ipsum,\\n      dolore,\\n      (dolore += ut)\\n    );\\n  }\\n\\n  return aliqua;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1[10:14],2[15:19],3[22:27],10:12\",\n    \"1[10:14],2[15:19],3[22:27],10:12\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const magna = aliqua => aliqua.ut((enim, ad) => enim, 0);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const minim = (ad, enim) => dolore.magna(ad / enim);\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const lorem = (ipsum, dolor, sit) => {\\n  const amet = dolor - ipsum;\\n  return consectetur.adipiscing(\\n    {\\n      elit: sed.eiusmod(sit - dolor) / amet + 2,\\n    },\\n    (tempor, incididunt) => ipsum + amet * incididunt\\n  );\\n};\\n\\nconst magna = aliqua => aliqua.ut((enim, ad) => enim, 0);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const minim = (ad, enim) => dolore.magna(ad / enim);\\n\\nconst sed = (eiusmod, tempor, incididunt) => {\\n  const ut = tempor - eiusmod;\\n  return labore.et(\\n    {\\n      amet: dolore.magna(incididunt - tempor) / ut + 2,\\n    },\\n    (aliqua, elit) => eiusmod + ut * elit\\n  );\\n};\\n\")))), mdx(\"hr\", null), mdx(\"p\", null, \"docs:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesurfer.pomb.us\"\n  }), \"codesurfer.pomb.us\")), mdx(\"hr\", null), mdx(\"h1\", null, \"\\uD83D\\uDC46 useState\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"ðŸ‘† useState\\\" subtitle=\\\"Manage state component\\\"\",\n    \"title\": \"\\\"ðŸ‘†\",\n    \"useState\\\"\": true,\n    \"subtitle\": \"\\\"Manage\",\n    \"state\": true,\n    \"component\\\"\": true\n  }), \"function HelloMessage ({ name }) {\\n  const [lastName, setLastName] = React.useState(\\\"\\\");\\n  const [formattedName, setFormattedName] = React.useState(`_${name.toLowerCase()}_`);\\n\\n  function handleLasName(e) {\\n    setLastName(e.target.value);\\n  }\\n\\n  return (\\n    <div>\\n      <h1>Hello {formattedName} {lastName}</h1>\\n      <input\\n        type=\\\"text\\\"\\n        placeholder=\\\"lastname\\\"\\n        value={lastName}\\n        onChange={handleLasName}\\n      />\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2,3 subtitle=\\\"Defining useState\\\"\",\n    \"2,3\": true,\n    \"subtitle\": \"\\\"Defining\",\n    \"useState\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11,15 subtitle=\\\"Showing and using states\\\"\",\n    \"11,15\": true,\n    \"subtitle\": \"\\\"Showing\",\n    \"and\": true,\n    \"using\": true,\n    \"states\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6,16 subtitle=\\\"Updating state\\\"\",\n    \"6,16\": true,\n    \"subtitle\": \"\\\"Updating\",\n    \"state\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"ðŸ‘† useState tips\\\"\",\n    \"title\": \"\\\"ðŸ‘†\",\n    \"useState\": true,\n    \"tips\\\"\": true\n  }), \"function HelloMessage ({ name }) {\\n  const [lastName, setLastName] = React.useState(\\\"\\\");\\n  const [formattedName, setFormattedName] = React.useState(`_${name.toLowerCase()}_`);\\n\\n  function handleLasName(e) {\\n    setLastName(e.target.value);\\n  }\\n\\n  return (\\n    <div>\\n      <h1>Hello {formattedName} {lastName}</h1>\\n      <input\\n        type=\\\"text\\\"\\n        placeholder=\\\"lastname\\\"\\n        value={lastName}\\n        onChange={handleLasName}\\n      />\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"ðŸ‘† useState tips\\\" subtitle=\\\"Lazy initialization\\\"\",\n    \"title\": \"\\\"ðŸ‘†\",\n    \"useState\": true,\n    \"tips\\\"\": true,\n    \"subtitle\": \"\\\"Lazy\",\n    \"initialization\\\"\": true\n  }), \"function HelloMessage ({ name }) {\\n  const [lastName, setLastName] = React.useState(\\\"\\\");\\n  const [formattedName, setFormattedName] = React.useState(() => {\\n    return `_${name.toLowerCase()}_`;\\n  });\\n\\n  function handleLasName(e) {\\n    setLastName(e.target.value);\\n  }\\n\\n  return (\\n    <div>\\n      <h1>Hello {formattedName} {lastName}</h1>\\n      <input\\n        type=\\\"text\\\"\\n        placeholder=\\\"lastname\\\"\\n        value={lastName}\\n        onChange={handleLasName}\\n      />\\n    </div>\\n  )\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"ðŸ‘† useState tips\\\"\",\n    \"title\": \"\\\"ðŸ‘†\",\n    \"useState\": true,\n    \"tips\\\"\": true\n  }), \"function Counter() {\\n  const [count, setCount] = React.useState(0);\\n\\n  function increment() {\\n    setCount(count + 1);\\n  }\\n\\n  function decrement() {\\n    setCount(count - 1);\\n  }\\n\\n  return (\\n    <div style={{ marginTop: 20 }}>\\n      <button type=\\\"button\\\" onClick={increment}>Increment</button>\\n      {` ${count} `}\\n      <button type=\\\"button\\\" onClick={decrement}>Decrement</button>\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"ðŸ‘† useState tips\\\" subtitle=\\\"Set with functional form\\\"\",\n    \"title\": \"\\\"ðŸ‘†\",\n    \"useState\": true,\n    \"tips\\\"\": true,\n    \"subtitle\": \"\\\"Set\",\n    \"with\": true,\n    \"functional\": true,\n    \"form\\\"\": true\n  }), \"function Counter() {\\n  const [count, setCount] = React.useState(0);\\n\\n  function increment() {\\n    setCount(prevCount => prevCount + 1);\\n  }\\n\\n  function decrement() {\\n    setCount(prevCount => prevCount - 1);\\n  }\\n\\n  return (\\n    <div style={{ marginTop: 20 }}>\\n      <button type=\\\"button\\\" onClick={increment}>Increment</button>\\n      {` ${count} `}\\n      <button type=\\\"button\\\" onClick={decrement}>Decrement</button>\\n    </div>\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"\\u270C useReducer\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  const initialState = { name: '', lastname: '', phone: '' };\\n\\n  function Form() {\\n    const clearTime = React.useRef(null);\\n    const renders = React.useRef(0);\\n\\n    const [form, setForm] = React.useState(initialState);\\n    const [typing, setTyping] = React.useState(false);\\n    const [loading, setLoading] = React.useState(false);\\n    const [result, setResult] = React.useState(false);\\n\\n    function handleInput({ target }) {\\n      if (target) {\\n        if (clearTime.current) clearTimeout(clearTime.current);\\n        setTyping(true);\\n        setForm(prevForm => ({ ...prevForm, [target.name]: target.value }));\\n        clearTime.current = setTimeout(() => setTyping(false), 800);\\n      }\\n    }\\n\\n    async function onSubmit(e) {\\n      e.preventDefault();\\n      setLoading(true);\\n      await saveDataPromise();\\n      setLoading(false);\\n      setResult(true);\\n      setForm(initialState);\\n    }\\n\\n    console.log(renders.current++)\\n\\n    return (\\n      <form onSubmit={onSubmit}>\\n        <fieldset>\\n          <label>Name: </label>\\n          <input type=\\\"text\\\" name=\\\"name\\\" onChange={handleInput} value={form.name} />\\n        </fieldset>\\n        <fieldset>\\n          <label>Last Name: </label>\\n          <input type=\\\"text\\\" name=\\\"lastname\\\" onChange={handleInput} value={form.lastname} />\\n        </fieldset>\\n        <fieldset>\\n          <label>Phone: </label>\\n          <input type=\\\"tel\\\" name=\\\"phone\\\" onChange={handleInput} value={form.phone} />\\n        </fieldset>\\n\\n        <button type=\\\"submit\\\" disabled={typing || loading}>\\n          {typing ? \\\"Typing\\\" : loading ? \\\"Saving\\\" : \\\"Submit\\\"}\\n        </button>\\n\\n        {result && (\\n          <div>Success!!!!</div>\\n        )}\\n      </form>\\n    )\\n  }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6:10 subtitle=\\\"Init states\\\"\",\n    \"6:10\": true,\n    \"subtitle\": \"\\\"Init\",\n    \"states\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"15:17 subtitle=\\\"Updating states\\\"\",\n    \"15:17\": true,\n    \"subtitle\": \"\\\"Updating\",\n    \"states\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"23:27 subtitle=\\\"Updating state\\\"\",\n    \"23:27\": true,\n    \"subtitle\": \"\\\"Updating\",\n    \"state\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  const initialForm = { name: '', lastname: '', phone: '' };\\n  const initialState = {\\n    form: initialForm,\\n    typing: false,\\n    loading: false,\\n    result: false\\n  };\\n\\n  function reducer(state, action) {\\n    switch (action.type) {\\n      case \\\"SET\\\":\\n        return {\\n          ...state,\\n          typing: true,\\n          form: { ...state.form, [action.payload.name]: action.payload.value }\\n        };\\n      case \\\"NO_TYPING\\\":\\n        return { ...state, typing: false };\\n      case \\\"LOADING\\\":\\n        return { ...state, loading: true };\\n      case \\\"SUCCESS\\\":\\n        return { ...state, loading: false, result: true, form: initialForm };\\n      default:\\n        return state\\n    }\\n  }\\n\\n  function Form() {\\n    const clearTime = React.useRef(null);\\n    const renders = React.useRef(0);\\n\\n    const [state, dispatch] = React.useReducer(reducer, initialState);\\n    const { form, loading, result, typing } = state;\\n\\n    function handleInput({ target }) {\\n      if (target) {\\n        if (clearTime.current) clearTimeout(clearTime.current);\\n        dispatch({ type: \\\"SET\\\", payload: { name: target.name, value: target.value } })\\n        clearTime.current = setTimeout(() => dispatch({ type: \\\"NO_TYPING\\\" }), 800);\\n      }\\n    }\\n\\n    async function onSubmit(e) {\\n      e.preventDefault();\\n      dispatch({ type: \\\"LOADING\\\" })\\n      await saveDataPromise(form);\\n      dispatch({ type: \\\"SUCCESS\\\" })\\n    }\\n\\n    console.log(renders.current++);\\n\\n    return (\\n      <form onSubmit={onSubmit}>\\n        <fieldset>\\n          <label>Name: </label>\\n          <input type=\\\"text\\\" name=\\\"name\\\" onChange={handleInput} value={form.name} />\\n        </fieldset>\\n        <fieldset>\\n          <label>Last Name: </label>\\n          <input type=\\\"text\\\" name=\\\"lastname\\\" onChange={handleInput} value={form.lastname} />\\n        </fieldset>\\n        <fieldset>\\n          <label>Phone: </label>\\n          <input type=\\\"tel\\\" name=\\\"phone\\\" onChange={handleInput} value={form.phone} />\\n        </fieldset>\\n\\n        <button type=\\\"submit\\\" disabled={typing || loading}>\\n          {typing ? \\\"Typing\\\" : loading ? \\\"Saving\\\" : \\\"Submit\\\"}\\n        </button>\\n\\n        {result && (\\n          <div>Success!!!!</div>\\n        )}\\n      </form>\\n    )\\n  }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1:26,32 subtitle=\\\"Initial state, reducer and create useReducer\\\"\",\n    \"1:26,32\": true,\n    \"subtitle\": \"\\\"Initial\",\n    \"state,\": true,\n    \"reducer\": true,\n    \"and\": true,\n    \"create\": true,\n    \"useReducer\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"32,38,39,45,47 subtitle=\\\"Dispatch actions\\\"\",\n    \"32,38,39,45,47\": true,\n    \"subtitle\": \"\\\"Dispatch\",\n    \"actions\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"ðŸ‘† useState\\\"\",\n    \"title\": \"\\\"ðŸ‘†\",\n    \"useState\\\"\": true\n  }), \" * Params - useState(initialState)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"âœŒ useReducer\\\"\",\n    \"title\": \"\\\"âœŒ\",\n    \"useReducer\\\"\": true\n  }), \" * Params - useReducer(reducer, initialState, init)\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"ðŸ‘† useState\\\"\",\n    \"title\": \"\\\"ðŸ‘†\",\n    \"useState\\\"\": true\n  }), \" * Params - useState(initialState)\\n  - useState()\\n  - useState(\\\"Red\\\")\\n  - useState(\\n      () => someExpensiveComputation()\\n    )\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"âœŒ useReducer\\\"\",\n    \"title\": \"\\\"âœŒ\",\n    \"useReducer\\\"\": true\n  }), \" * Params - useReducer(reducer, initialState, init)\\n  * const reducerFn = (prevState, dispatchArg) => newState\\n  - useReducer(reducer, { count: 0 })\\n  - useReducer(\\n      reducer,\\n      0,\\n      (initialCount) => ({ count: initialCount })\\n    )\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"ðŸ‘† useState\\\"\",\n    \"title\": \"\\\"ðŸ‘†\",\n    \"useState\\\"\": true\n  }), \" * Params - useState(initialState)\\n * Return - [state, setState]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"âœŒ useReducer\\\"\",\n    \"title\": \"\\\"âœŒ\",\n    \"useReducer\\\"\": true\n  }), \" * Params - useReducer(reducer, initialState, init)\\n * Return - [state, dispatch]\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"ðŸ‘† useState\\\"\",\n    \"title\": \"\\\"ðŸ‘†\",\n    \"useState\\\"\": true\n  }), \" * Params - useState(initialState)\\n * Return - [state, setState]\\n  - <span>{state}</span>\\n  - setState(1)\\n  - setState(prevState => prevState + 1)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"âœŒ useReducer\\\"\",\n    \"title\": \"\\\"âœŒ\",\n    \"useReducer\\\"\": true\n  }), \" * Params - useReducer(reducer, initialState, init)\\n * Return - [state, dispatch]\\n  - <span>{state.count}</span>\\n  - dispatch({ type: \\\"TOGGLE\\\" })\\n  - dispatch({ type: \\\"SET_VALUE\\\", payload: 999 })\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"ðŸ‘† useState\\\"\",\n    \"title\": \"\\\"ðŸ‘†\",\n    \"useState\\\"\": true\n  }), \" * Params - useState(initialState)\\n * Return - [state, setState]\\n * When use it?\\n    - When state is simple\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"âœŒ useReducer\\\"\",\n    \"title\": \"\\\"âœŒ\",\n    \"useReducer\\\"\": true\n  }), \" * Params - useReducer(reducer, initialState, init)\\n * Return - [state, dispatch]\\n * When use it?\\n    - When we have complex state logic from the same domain\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Rules by \", mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"https://kentcdodds.com/blog/should-i-usestate-or-usereducer\"\n  }), \"Kent C. Dodds\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When it's just an independent element of state you're managing: useState\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When one element of your state relies on the value of another element of your state in order to update: useReducer\"), mdx(\"h5\", {\n    parentName: \"li\"\n  }, \"Outside of these \\\"rules,\\\" everything else is really subjective. Honestly, even the \\\"rules\\\" are subjective because as I demonstrated, you can do everything you want with either one.\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"ec6735b8-7190-57a8-8daa-a7cc184fc990","slug":"","title":"âš› ðŸ§·"}}}